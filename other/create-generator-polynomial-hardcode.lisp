;;;; this code is used to generate the code for setting the parameter *GENERATOR-POLYNOMIALS* within the file qr-sybmol.lisp
;;;; if you wish to run the code in this file, please compile and run this code from within the QR-SYMBOL package

(defparameter *codeword-counts* (list 7 10 13 15 16 17 18 20 22 24 26 28 30 32 34 36 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68))
(defparameter *used-codeword-counts* (make-hash-table))
(when (= 0 (hash-table-count *used-codeword-counts*))
  (dolist (x *codeword-counts*)
    (setf (gethash x *used-codeword-counts*) t)))

;; !!! Sorry for not providing much explanation of the process as used within this function!
(defun print-generator-polynomial-hardcode ()
  (let ((axl (list (cons 0 1) (cons 0 0))))
    (do ((factor 1 (1+ factor))
         (new-list1 nil nil)
         (new-list2 nil nil))
        ((>= factor (car (last *codeword-counts*))))
      (let ((axlf (list (cons 0 1) (cons factor 0))))
        ;;(format t "main poly~%~a~%" axl)
        ;;(format t "factor poly~%~a~%" axlf)
        ;; do multiplication
        (dolist (x axl)
          (dolist (y axlf)
            (push (cons (+ (car x) (car y)) (+ (cdr x) (cdr y))) new-list1)))
        ;;(format t "M~d~%~a~%" factor (reverse new-list1))
        ;; combine like terms
        (dotimes (x-power (+ 2 factor))
          (let ((temp-list nil))
            (dolist (x new-list1)
              (when (= (cdr x) x-power)
                (push (car x) temp-list)))
            ;;(format t "T~d~%~a~%" x-power temp-list)
            (when temp-list
              (let ((bv (make-bit-vector-from-binary-string "0")))
                (dolist (x temp-list)
                  (let ((temp-bv (make-bit-vector-from-binary-string (write-to-string (aref *galois-field* (mod x 255)) :base 2)))
                        (bv-len (length bv)))
                    (let ((tbv-len (length temp-bv)))
                      (when (/= bv-len tbv-len)
                        (if (> bv-len tbv-len)
                            (setq temp-bv (add-zeroes-to-left-end-of-bit-vector temp-bv (- bv-len tbv-len)))
                            (setq bv (add-zeroes-to-left-end-of-bit-vector bv (- tbv-len bv-len))))))
                    (setq bv (bit-xor bv temp-bv))))
                (push (cons (parse-integer (subseq (format nil "~a" bv) 2) :radix 2) x-power) new-list2)))))
        (setq axl nil)
        (dolist (x new-list2)
          (push (cons (gethash (car x) *galois-field-reverse-lookup*) (cdr x)) axl))
        (setq axl (reverse axl)))
      (when (gethash (1+ factor) *used-codeword-counts*)
        (format t "(setf (gethash ~d *generator-polynomials*) (vector" (1+ factor))
        (dolist (x axl)
          (format t " (vector ~d ~d)" (mod (car x) 255) (cdr x)))
        (format t "))~%")))))
